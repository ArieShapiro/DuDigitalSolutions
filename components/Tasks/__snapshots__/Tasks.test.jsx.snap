// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`task listing actions renders correctly 1`] = `
<div
  className="tasks"
>
  <div
    className="task-item"
  >
    <Task
      task={
        Object {
          "description": "Please make sure the \\"brand-box\\" is perfectly centered vertically and horizontally even if we start changing the height of \\".header\\".
You get free cookies if your solution doesn't depend on hardcoded px heights at all. ;)",
          "done": false,
          "estimatedTime": "2-3 Min",
          "id": 1,
          "reason": "We do a lot of complex coding, but CSS is still the basis of every beautiful web application. ;)",
          "title": "Center the \\"brand-box\\" in our header",
        }
      }
    />
  </div>
  <div
    className="task-item"
  >
    <Task
      task={
        Object {
          "description": "At the bottom right of every task item you have a [delete] button, that does nothing right now.
Please go ahead and make it work by adding a redux action and manipulating the store to remove the corresponding task on click.",
          "done": false,
          "estimatedTime": "5-8 Min",
          "id": 2,
          "reason": "We want to see working with Redux basics. Although we don't always use Redux, it's still one of the most important flux implementations to know.",
          "title": "Make the \\"delete\\" button work",
        }
      }
    />
  </div>
  <div
    className="task-item"
  >
    <Task
      task={
        Object {
          "answer1": "",
          "answer2": "",
          "description": "Now a theoretical question: We want to know how you would tackle a big project.
Imagine you have to build a SPA of a complex application like a social media platform containing multiple entities (users, profiles, posts, comments, messages, ...).

* What react related packages and setup would you choose?     (store management, type checking, codestyle, testing, ...) 
*How would you improve our simple example to make it more readable/cleaner?

Please add your answers in the mockTaskData.js file under \\"answer1\\" and \\"answer2\\".",
          "done": false,
          "estimatedTime": "3-10 Min",
          "id": 3,
          "reason": "This will give us an idea which packages and technologies you already worked with
and also provide a good basis for our interview",
          "title": "Describe your setup",
        }
      }
    />
  </div>
  <div
    className="task-item"
  >
    <Task
      task={
        Object {
          "description": "At the moment, the unit tests will fail, because of an error we worked in there for you. Only small adjustments are needed to make all the tests in this application pass.

(This task is already advanced. If you can solve it: AWESOME. If not: don't worry about it. We want you to grow and learn with us and that's a good topic to get started with. ;))",
          "done": false,
          "estimatedTime": "5-15 Min",
          "id": 4,
          "reason": "Please fix our broken application and show us how awesome you are at working with tests. ;)",
          "title": "Fix the testcases to make them all pass",
        }
      }
    />
  </div>
  <div
    className="task-item"
  >
    <Task
      task={
        Object {
          "description": "Please zip the project folder, containing the code you've changed, and send it to jobs@du.digital",
          "done": false,
          "estimatedTime": "1 Min",
          "id": 5,
          "reason": "Thank you for taking part in our little test. We will get back to you as soon as we looked it over",
          "title": "Send everything over",
        }
      }
    />
  </div>
</div>
`;
